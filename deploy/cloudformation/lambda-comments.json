{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "API Gateway + Lambda + S3 Blog Commenting System",
  "Parameters": {
    "TagName": {
      "Description": "Tag for resources",
      "Type": "String"
    },
    "Origin": {
      "Description": "Origin URL for CORS",
      "Type": "String"
    },
    "NewResources": {
      "Description": "Include new resources (still being developed)",
      "Default": "false",
      "Type": "String",
      "AllowedValues" : ["true", "false"]
    }
  },
  "Conditions" : {
    "CreateNewResources" : {"Fn::Equals" : [{"Ref" : "NewResources"}, "true"]}
  },
  "Resources": {
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "LambdaRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "LambdaRole"
          }
        ]
      }
    },
    "LambdaCommentsCombinedPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "LambdaCommentsCombined",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": "s3:*",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    { "Ref": "WebsiteS3" },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": "s3:*",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    { "Ref": "PrivateS3" },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": "dynamodb:*",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:dynamodb:",
                    { "Ref": "AWS::Region" },
                    ":",
                    { "Ref": "AWS::AccountId" },
                    ":table/",
                    { "Ref" : "JobStreamDynamoDBTable" }
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:DescribeStream",
                "dynamodb:ListStreams"
              ],
              "Resource": { "Fn::GetAtt": [ "JobStreamDynamoDBTable", "StreamArn" ] }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "LambdaRole"
          }
        ]
      }
    },
    "QueueCommentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = function(event, context) { context.fail('Not Implemented'); };"
        },
        "Description": "QueueComment",
        "Handler": "lib/index.handler",
        "MemorySize": 128,
        "Role": { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
        "Runtime": "nodejs",
        "Timeout": 30
      }
    },
    "QueueCommentLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : [ "QueueCommentLambdaFunction", "Arn" ] },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              { "Ref" : "AWS::Region" },
              ":",
              { "Ref" : "AWS::AccountId" },
              ":",
              { "Ref" : "RestApi" },
              "/*/POST/comments"
            ]
          ]
        }
      }
    },
    "WorkerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = function(event, context) { context.fail('Not Implemented'); };"
        },
        "Description": "Worker",
        "Handler": "lib/index.handler",
        "MemorySize": 128,
        "Role": { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
        "Runtime": "nodejs",
        "Timeout": 30
      }
    },
    "WorkerLambdaEventSourceMapping": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "BatchSize": 1,
        "Enabled": true,
        "EventSourceArn": { "Fn::GetAtt": [ "JobStreamDynamoDBTable", "StreamArn" ] },
        "FunctionName": { "Ref": "WorkerLambdaFunction" },
        "StartingPosition": "LATEST"
      },
      "DependsOn": [
        "JobStreamDynamoDBTable",
        "LambdaCommentsCombinedPolicy",
        "LambdaRoleInstanceProfile",
        "LambdaRole"
      ]
    },
    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": { "Ref": "RestApi" },
        "Description": "Production deployment",
        "StageName": "prod"
      },
      "DependsOn": [
        "RestApi",
        "CommentsApiResource",
        "PostCommentApiMethod",
        "OptionsCommentApiMethod"
      ]
    },
    "RestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": "API for blog comments",
        "Name": {
          "Fn::Join": [
            "",
            [
              "Comments-",
              { "Ref": "AWS::StackName" }
            ]
          ]
        }
      }
    },
    "CommentsApiResource": {
      "Type" : "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "RestApi" },
        "ParentId": { "Fn::GetAtt": ["RestApi", "RootResourceId"] },
        "PathPart": "comments"
      }
    },
    "PostCommentApiMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "RestApi" },
        "ResourceId": { "Ref": "CommentsApiResource" },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                { "Ref" : "AWS::Region" },
                ":lambda:path/2015-03-31/functions/",
                { "Fn::GetAtt" : [ "QueueCommentLambdaFunction", "Arn" ] },
                "/invocations"
              ]
            ]
          },
          "RequestTemplates": {
            "application/json": "{ \"sourceIp\": \"$context.identity.sourceIp\", \"fields\": $input.json('$') }"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "201",
              "ResponseParameters" : {
                "method.response.header.Access-Control-Allow-Origin": {
                  "Fn::Join": [
                    "",
                    [
                      "'",
                      { "Ref" : "Origin" },
                      "'"
                    ]
                  ]
                }
              }
            },
            {
              "StatusCode": "400",
              "ResponseParameters" : {
                "method.response.header.Access-Control-Allow-Origin": {
                  "Fn::Join": [
                    "",
                    [
                      "'",
                      { "Ref" : "Origin" },
                      "'"
                    ]
                  ]
                }
              },
              "SelectionPattern": ".*Error.*"
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "201",
            "ResponseParameters" : {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          },
          {
            "StatusCode": "400",
            "ResponseParameters" : {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "OptionsCommentApiMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "RestApi" },
        "ResourceId": { "Ref": "CommentsApiResource" },
        "HttpMethod": "OPTIONS",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{ \"statusCode\": 200 }"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters" : {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": {
                  "Fn::Join": [
                    "",
                    [
                      "'",
                      { "Ref" : "Origin" },
                      "'"
                    ]
                  ]
                }
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters" : {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "WebsiteS3": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedOrigins": [ { "Ref" : "Origin" } ],
              "AllowedMethods": [ "GET" ],
              "MaxAge": 3000,
              "AllowedHeaders": [ "Authorization" ]
            }
          ]
        },
        "WebsiteConfiguration": {
          "IndexDocument": "index.html"
        }
      }
    },
    "WebsiteS3BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": { "Ref": "WebsiteS3" },
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [ "s3:*" ],
              "Principal": {
                "AWS": { "Fn::GetAtt" : [ "LambdaRole" , "Arn" ] }
              },
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      { "Ref": "WebsiteS3" },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [ "s3:GetObject" ],
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      { "Ref": "WebsiteS3" },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "PrivateS3": {
      "Type": "AWS::S3::Bucket"
    },
    "PrivateS3BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "PrivateS3"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [ "s3:*" ],
              "Principal": {
                "AWS": { "Fn::GetAtt" : [ "LambdaRole" , "Arn" ] }
              },
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      { "Ref": "PrivateS3" },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "JobStreamDynamoDBTable" : {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [
          {
            "AttributeName" : "id",
            "AttributeType" : "S"
          }
        ],
        "KeySchema" : [
          {
            "AttributeName" : "id",
            "KeyType" : "HASH"
          }
        ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : "1",
          "WriteCapacityUnits" : "1"
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_IMAGE"
        }
      }
    }
  },
  "Outputs": {
    "LambdaRoleArn": {
      "Value": { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
      "Description": "ARN for LambdaRole"
    }
  }
}
