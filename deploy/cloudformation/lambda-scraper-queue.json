{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "API Gateway + Lambda + S3 for Scraping Websites",
  "Parameters": {
    "TagName": {
      "Description": "Tag for resources",
      "Type": "String"
    },
    "ServiceToken": {
      "Description": "ARN for ApiGatewayCloudFormation-LambdaFunction",
      "Type": "String"
    },
    "NewResources": {
      "Description": "Include new resources (still being developed)",
      "Default": "false",
      "Type": "String",
      "AllowedValues" : ["true", "false"]
    }
  },
  "Conditions" : {
    "CreateNewResources" : {"Fn::Equals" : [{"Ref" : "NewResources"}, "true"]}
  },
  "Resources": {
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "LambdaRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "LambdaRole"
          }
        ]
      }
    },
    "S3FullAccessPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3FullAccess",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "s3:*",
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "LambdaRole"
          }
        ]
      }
    },
    "LambdaCloudWatchLogsPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "LambdaCloudWatchLogs",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                 "logs:CreateLogStream",
                 "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:*:*:*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "LambdaRole"
          }
        ]
      }
    },
    "ListActiveJobsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = function(event, context) { context.fail('Not Implemented'); };"
        },
        "Description": "List Active Jobs",
        "Handler": "lib/index.handler",
        "MemorySize": 128,
        "Role": { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
        "Runtime": "nodejs",
        "Timeout": 30
      }
    },
    "ListActiveJobsLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : [ "ListActiveJobsLambdaFunction", "Arn" ] },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              { "Ref" : "AWS::Region" },
              ":",
              { "Ref" : "AWS::AccountId" },
              ":",
              { "Ref" : "RestApi" },
              "/*/GET/jobs"
            ]
          ]
        }
      }
    },
    "GetJobStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = function(event, context) { context.fail('Not Implemented'); };"
        },
        "Description": "GetJobStatus",
        "Handler": "lib/index.handler",
        "MemorySize": 128,
        "Role": { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
        "Runtime": "nodejs",
        "Timeout": 30
      }
    },
    "GetJobStatusLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : [ "GetJobStatusLambdaFunction", "Arn" ] },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              { "Ref" : "AWS::Region" },
              ":",
              { "Ref" : "AWS::AccountId" },
              ":",
              { "Ref" : "RestApi" },
              "/*/GET/jobs/*"
            ]
          ]
        }
      }
    },
    "QueueJobLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = function(event, context) { context.fail('Not Implemented'); };"
        },
        "Description": "QueueJob",
        "Handler": "lib/index.handler",
        "MemorySize": 128,
        "Role": { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
        "Runtime": "nodejs",
        "Timeout": 30
      }
    },
    "QueueJobLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : [ "QueueJobLambdaFunction", "Arn" ] },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              { "Ref" : "AWS::Region" },
              ":",
              { "Ref" : "AWS::AccountId" },
              ":",
              { "Ref" : "RestApi" },
              "/*/POST/jobs"
            ]
          ]
        }
      }
    },
    "WorkerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = function(event, context) { context.fail('Not Implemented'); };"
        },
        "Description": "Worker",
        "Handler": "lib/index.handler",
        "MemorySize": 128,
        "Role": { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
        "Runtime": "nodejs",
        "Timeout": 30
      }
    },
    "RestApi": {
      "Type": "Custom::RestApi",
      "Properties": {
        "ServiceToken": { "Ref": "ServiceToken" },
        "name": "Scraper Queue",
        "description": "API for adding jobs to scraper queue and viewing status and results"
      }
    },
    "JobsApiResource": {
      "Type": "Custom::ApiResource",
      "Properties": {
        "ServiceToken": { "Ref": "ServiceToken" },
        "restApiId": { "Ref": "RestApi" },
        "parentId": { "Fn::GetAtt": [ "RestApi", "parentResourceId" ] },
        "pathPart": "jobs",
        "corsConfiguration": {
          "allowMethods": [ "GET", "POST" ],
          "allowDefaultHeaders": true
        }
      }
    },
    "GetJobsApiMethod": {
      "Type": "Custom::ApiMethod",
      "Properties": {
        "ServiceToken": { "Ref": "ServiceToken" },
        "restApiId": { "Ref": "RestApi" },
        "resourceId": { "Ref": "JobsApiResource" },
        "method": {
          "httpMethod": "GET"
        },
        "integration": {
          "type": "AWS",
          "httpMethod": "POST",
          "uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                { "Ref" : "AWS::Region" },
                ":lambda:path/2015-03-31/functions/",
                { "Fn::GetAtt" : [ "ListActiveJobsLambdaFunction", "Arn" ] },
                "/invocations"
              ]
            ]
          }
        },
        "responses": {
          "default": {
            "statusCode": "200"
          },
          ".*NotFound.*": {
            "statusCode": "404"
          }
        }
      }
    },
    "PostJobsApiMethod": {
      "Type": "Custom::ApiMethod",
      "Properties": {
        "ServiceToken": { "Ref": "ServiceToken" },
        "restApiId": { "Ref": "RestApi" },
        "resourceId": { "Ref": "JobsApiResource" },
        "method": {
          "httpMethod": "POST"
        },
        "integration": {
          "type": "AWS",
          "httpMethod": "POST",
          "uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                { "Ref" : "AWS::Region" },
                ":lambda:path/2015-03-31/functions/",
                { "Fn::GetAtt" : [ "QueueJobLambdaFunction", "Arn" ] },
                "/invocations"
              ]
            ]
          },
          "requestTemplates": {
            "application/x-www-form-urlencoded": "## convert HTML POST data or HTTP GET query string to JSON\n \n## get the raw post data from the AWS built-in variable and give it a nicer name\n#if ($context.httpMethod == \"POST\")\n #set($rawAPIData = $input.path('$'))\n#elseif ($context.httpMethod == \"GET\")\n #set($rawAPIData = $input.params().querystring)\n #set($rawAPIData = $rawAPIData.toString())\n #set($rawAPIDataLength = $rawAPIData.length() - 1)\n #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))\n #set($rawAPIData = $rawAPIData.replace(\", \", \"&\"))\n#else\n #set($rawAPIData = \"\")\n#end\n \n## first we get the number of \"&\" in the string, this tells us if there is more than one key value pair\n#set($countAmpersands = $rawAPIData.length() - $rawAPIData.replace(\"&\", \"\").length())\n \n## if there are no \"&\" at all then we have only one key value pair.\n## we append an ampersand to the string so that we can tokenise it the same way as multiple kv pairs.\n## the \"empty\" kv pair to the right of the ampersand will be ignored anyway.\n#if ($countAmpersands == 0)\n #set($rawPostData = $rawAPIData + \"&\")\n#end\n \n## now we tokenise using the ampersand(s)\n#set($tokenisedAmpersand = $rawAPIData.split(\"&\"))\n \n## we set up a variable to hold the valid key value pairs\n#set($tokenisedEquals = [])\n \n## now we set up a loop to find the valid key value pairs, which must contain only one \"=\"\n#foreach( $kvPair in $tokenisedAmpersand )\n #set($countEquals = $kvPair.length() - $kvPair.replace(\"=\", \"\").length())\n #if ($countEquals == 1)\n  #set($kvTokenised = $kvPair.split(\"=\"))\n  #if ($kvTokenised[0].length() > 0)\n   ## we found a valid key value pair. add it to the list.\n   #set($devNull = $tokenisedEquals.add($kvPair))\n  #end\n #end\n#end\n \n## next we set up our loop inside the output structure \"{\" and \"}\"\n{\n#foreach( $kvPair in $tokenisedEquals )\n  ## finally we output the JSON for this pair and append a comma if this isn't the last pair\n  #set($kvTokenised = $kvPair.split(\"=\"))\n \"$util.urlDecode($kvTokenised[0])\" : #if($kvTokenised[1].length() > 0)\"$util.urlDecode($kvTokenised[1])\"#{else}\"\"#end#if( $foreach.hasNext ),#end\n#end\n}"
          }
        },
        "responses": {
          "default": {
            "statusCode": "200"
          },
          ".*Error.*": {
            "statusCode": "400"
          },
          ".*NotFound.*": {
            "statusCode": "404"
          }
        }
      }
    },
    "JobsJobIdApiResource": {
      "Type": "Custom::ApiResource",
      "Properties": {
        "ServiceToken": { "Ref": "ServiceToken" },
        "restApiId": { "Ref": "RestApi" },
        "parentId": { "Ref": "JobsApiResource" },
        "pathPart": "{jobId}",
        "corsConfiguration": {
          "allowMethods": [ "GET" ],
          "allowDefaultHeaders": true
        }
      }
    },
    "GetJobsJobIdApiMethod": {
      "Type": "Custom::ApiMethod",
      "Properties": {
        "ServiceToken": { "Ref": "ServiceToken" },
        "restApiId": { "Ref": "RestApi" },
        "resourceId": { "Ref": "JobsJobIdApiResource" },
        "method": {
          "httpMethod": "GET"
        },
        "integration": {
          "type": "AWS",
          "httpMethod": "POST",
          "uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                { "Ref" : "AWS::Region" },
                ":lambda:path/2015-03-31/functions/",
                { "Fn::GetAtt" : [ "GetJobStatusLambdaFunction", "Arn" ] },
                "/invocations"
              ]
            ]
          },
          "requestTemplates": {
            "application/json": {
              "jobId": "$input.params('jobId')"
            }
          }
        },
        "responses": {
          "default": {
            "statusCode": "200"
          },
          ".*NotFound.*": {
            "statusCode": "404"
          }
        }
      }
    },
    "WebsiteS3": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "WebsiteConfiguration": {
          "IndexDocument": "index.html"
        }
      }
    },
    "WebsiteS3BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "WebsiteS3"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [ "s3:*" ],
              "Principal": {
                "AWS": { "Fn::GetAtt" : [ "LambdaRole" , "Arn" ] }
              },
              "Resource": [
                { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "WebsiteS3" }, "/*" ] ] }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [ "s3:*" ],
              "Principal": "*",
              "Resource": [
                { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "WebsiteS3" }, "/*" ] ] }
              ]
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "LambdaRoleArn": {
      "Value": { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
      "Description": "ARN for LambdaRole"
    }
  }
}
